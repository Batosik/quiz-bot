require('dotenv').config()
const {Bot, Keyboard, InlineKeyboard, GrammyError, HttpError, SessionFlavor, session, Composer } = require('grammy')
const {getRandomQuestion, getCorrectAnswer, topics} = require('./utils');

const bot = new Bot(process.env.BOT_API_KEY);

bot.command('start', async (ctx) => {
  const startKeyboard = new InlineKeyboard()
    .text('–î–∞!')
    .row()
    .text('–ü–æ—Ç—Ä–µ–Ω–µ—Ä—É—é—Å—å ü§Ø')
  await ctx.reply(
    '–ü—Ä–∏–≤–µ—Ç! üëã \n–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –Ω–∞ –∫–≤–∏–∑! \n–Ø –±—É–¥—É —Ç–≤–æ–∏–º –ø—Ä–æ–≤–æ–¥–Ω–∏–∫–æ–º –≤ —ç—Ç–æ–º —É–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω–æ–º –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–∏ –ø–æ –≤–æ–ø—Ä–æ—Å–∞–º –∏ –æ—Ç–≤–µ—Ç–∞–º. –í–º–µ—Å—Ç–µ –º—ã –ø—Ä–æ–∫–∞—á–∞–µ–º —Ç–≤–æ–∏ –Ω–∞–≤—ã–∫–∏! üß† \n–ì–æ—Ç–æ–≤ –Ω–∞—á–∞—Ç—å –∏–≥—Ä—É?' ,
    { reply_markup: startKeyboard
    })
})

bot.callbackQuery("–î–∞!", async (ctx) => {
  await ctx.answerCallbackQuery()
  await ctx.reply('–ò–≥—Ä–∞ —Å–æ—Å—Ç–æ–∏—Ç –∏–∑ 3 –±–ª–æ–∫–æ–≤ –≤–æ–ø—Ä–æ—Å–æ–≤ - –†–∞–∑–º–∏–Ω–∫–∞, –ß–ì–ö –∏ –î–∞—Ç—ã. –í –∫–∞–∂–¥–æ–º –±–ª–æ–∫–µ –ø–æ 4 –≤–æ–ø—Ä–æ—Å–∞.')
  setTimeout(() => {
    ctx.reply('–í–æ–ø—Ä–æ—Å—ã –∏–∑ –±–ª–æ–∫–∞\n–†–∞–∑–º–∏–Ω–∫–∞ - 10 –±–∞–ª–ª–æ–≤ \n–î–∞—Ç—ã - 15 –±–∞–ª–ª–æ–≤\n–ß–ì–ö - 20 –±–∞–ª–ª–æ–≤.');
  }, 1000);
  setTimeout(() => {
    ctx.reply('–î–∞–≤–∞–π –Ω–∞—á–Ω–µ–º?', {
      reply_markup: new InlineKeyboard()
      .text('–ü–æ–µ—Ö–∞–ª–∏')
    });
  }, 3000);
})


bot.use(
  session({
    initial: () => ({
      currentQuestionIndex: 0,
      score: 0,
      WWWNumber: 0
    }),
  })
)


bot.callbackQuery('–ü–æ–µ—Ö–∞–ª–∏', async (ctx) => {
  await ctx.answerCallbackQuery()
  await ctx.reply('/startquiz')
})

const quizComposer = new Composer(bot)

quizComposer.command("startquiz", async (ctx) => {
  ctx.session.currentQuestionIndex = 0
  ctx.session.score = 0
  ctx.session.WWWNumber = 0
  await ctx.reply("–ü–µ—Ä–≤—ã–π —Ä–∞—É–Ω–¥")
  await askQuestion(ctx)
})

async function askQuestion(ctx) {
  if (ctx.session.WWWNumber < 5) {
    const question = getRandomQuestion('WWW').question
    await ctx.reply(question.text)
    ctx.api.sendMessage(ctx.chat.id, question.text)
    await ctx.reply("Enter your answer:")
    quizComposer.on('text', async (ctx) => {
      const userAnswer = ctx.message.text.trim().toLowerCase()
      const correctAnswer = question.answer.toLowerCase()
      
      if (userAnswer === correctAnswer) {
        ctx.session.score += 20
        await ctx.reply('üëç')
      } else {
        await ctx.reply('‚ùå')
        await ctx.reply(`–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: ${correctAnswer} `)
      }
      ctx.session.WWWNumber += 1
      await askQuestion(ctx)
    })
  } else {
    await ctx.reply(`–†–∞—É–Ω–¥ –∑–∞–≤–µ—Ä—à–µ–Ω! –¢—ã –Ω–∞–±—Ä–∞–ª ${ctx.session.score} `)
  }
}

quizComposer.command("stop", async (ctx) => {
  await ctx.reply("Quiz stopped.")
  ctx.session.currentQuestionIndex = 0
})

bot.use(quizComposer)


bot.callbackQuery("–ü–æ—Ç—Ä–µ–Ω–µ—Ä—É—é—Å—å ü§Ø", async (ctx) => {
  await ctx.answerCallbackQuery()
  const trainKeyboard = new Keyboard()
    .text('–†–∞–∑–º–∏–Ω–∫–∞')
    .text('–ß–ì–ö')
    .row()
    .text('–î–∞—Ç—ã')
    .text('–ú–µ–¥–∏–∞')
    .resized()

  await ctx.reply('–í—ã–±–µ—Ä–∏ —Ç–∏–ø —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ üëá', {
    reply_markup: trainKeyboard
  })
})

bot.command('training', async (ctx) => {
  const trainKeyboard = new Keyboard()
    .text('–†–∞–∑–º–∏–Ω–∫–∞')
    .text('–ß–ì–ö')
    .row()
    .text('–î–∞—Ç—ã')
    .text('–ú–µ–¥–∏–∞')
    .resized()

  await ctx.reply('–í—ã–±–µ—Ä–∏ —Ç–∏–ø —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ üëá', {
    reply_markup: trainKeyboard
  })
})

bot.hears(['–†–∞–∑–º–∏–Ω–∫–∞', '–ß–ì–ö', '–î–∞—Ç—ã', '–ú–µ–¥–∏–∞'], async (ctx) => {
  const topic = topics[ctx.message.text];
  const question = getRandomQuestion(topic).question;
  
  let inlineKeyboard;

  if (question.hasOptions) {
    const buttonRows = question.options.map((option) => [
      InlineKeyboard.text(
        option.text,
        JSON.stringify({
          type: `${topic}-option`,
          qID: question.questionID,
          isCorrect: option.isCorrect,
        }),
      ),
    ]);
  inlineKeyboard = InlineKeyboard.from(buttonRows);
  }
  await ctx.reply(question.text, {
    reply_markup: inlineKeyboard,
  });
});


bot.on('callback_query:data' , async (ctx) => {
  const callbackData = JSON.parse(ctx.callbackQuery.data)
  if (!callbackData.type.includes('option')) {
    const answer = getCorrectAnswer(callbackData.type, callbackData.qID)
    await ctx.reply(answer)
    await ctx.answerCallbackQuery();
    return;
  }

  if (callbackData.isCorrect) {
    await ctx.reply("üëç")
    await ctx.answerCallbackQuery();
    return;
  }

  const answer = getCorrectAnswer(callbackData.type.split('-')[0], callbackData.qID);
  await ctx.reply(`‚ùå`)
  await ctx.reply(`–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: ${answer} `)
  await ctx.answerCallbackQuery();
})

bot.catch((err) => {
  const ctx = err.ctx;
  console.error(`Error while handling update ${ctx.update.update_id}:`);
  const e = err.error;
  if (e instanceof GrammyError) {
    console.error("Error in request:", e.description);
  } else if (e instanceof HttpError) {
    console.error("Could not contact Telegram:", e);
  } else {
    console.error("Unknown error:", e);
  }
});



bot.start();